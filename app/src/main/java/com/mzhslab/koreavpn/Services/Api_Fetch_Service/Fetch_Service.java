package com.mzhslab.koreavpn.Services.Api_Fetch_Service;import android.content.Intent;import android.content.SharedPreferences;import android.os.Build;import android.os.IBinder;import android.util.Log;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.annotation.RequiresApi;import androidx.core.app.JobIntentService;import androidx.localbroadcastmanager.content.LocalBroadcastManager;import com.android.volley.DefaultRetryPolicy;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.google.gson.Gson;import com.mzhslab.koreavpn.utils.AppOpenManager;import com.mzhslab.koreavpn.Model.api_data_model_updated;import com.mzhslab.koreavpn.Model.api_model;import com.mzhslab.koreavpn.App_Class.MyApplication;import com.mzhslab.koreavpn.utils.Constant;import com.mzhslab.koreavpn.utils.Ping;import org.jetbrains.annotations.NotNull;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;import java.util.Random;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;import io.reactivex.Observable;import io.reactivex.ObservableSource;import io.reactivex.Observer;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.disposables.Disposable;import io.reactivex.functions.Function;import io.reactivex.plugins.RxJavaPlugins;import io.reactivex.schedulers.Schedulers;import static com.mzhslab.koreavpn.utils.Constant.LoadData;import static com.mzhslab.koreavpn.utils.Constant.storeValueToPreference;public class Fetch_Service extends JobIntentService {    SharedPreferences home_Activity_SP;    com.mzhslab.koreavpn.Model.api_model api_model;    ArrayList<com.mzhslab.koreavpn.Model.api_model> api_array;    int random_selection = 0;    public AppOpenManager appOpenManager;    String local_ip_data;    com.mzhslab.koreavpn.Model.api_data_model_updated api_data_model_updated;    api_data_model_updated Api_response_model;    @Override    public void onCreate() {        super.onCreate();    }    @Override    public void onDestroy() {        super.onDestroy();    }    @Nullable    @Override    public IBinder onBind(@NotNull Intent intent) {        return null;    }    @Override    protected void onHandleWork(@NonNull Intent intent) {    }    @RequiresApi(api = Build.VERSION_CODES.N)    @Override    public int onStartCommand(@Nullable Intent intent, int flags, int startId) {        if (intent != null && intent.getExtras() != null) {            local_ip_data = intent.getStringExtra("my_local_ip");            startWork();        }        return super.onStartCommand(intent, flags, startId);    }    @RequiresApi(api = Build.VERSION_CODES.N)    private void startWork() {        init_array_list();        hit_api();    }    private void init_array_list() {        home_Activity_SP = getSharedPreferences("DATA", MODE_PRIVATE);        api_array = new ArrayList<>();    }    @RequiresApi(api = Build.VERSION_CODES.N)    private void hit_api() {        RequestQueue queue = Volley.newRequestQueue(Fetch_Service.this);        StringRequest stringRequest = new StringRequest(Request.Method.GET, Constant.APP_URL, this::fetch_data, error -> {            Log.d("exc_dec", "" + error.getMessage());            String backup_response = LoadData(Fetch_Service.this);            if (backup_response != null && !backup_response.isEmpty()) {                Log.d("encoded_file", "" + backup_response);                fetch_data(backup_response);            }        });        stringRequest.setRetryPolicy(new DefaultRetryPolicy(5000, 2, 2));        queue.add(stringRequest);    }    @RequiresApi(api = Build.VERSION_CODES.N)    private void fetch_data(String response_data) {        parse_data(response_data);    }    @RequiresApi(api = Build.VERSION_CODES.N)    private void parse_data(String input) {        Log.d("is_json_valid", "" + isJSONValid(input));        if (isJSONValid(input)) {            api_array.clear();            try {                JSONObject jsonObject = new JSONObject(input);                JSONArray jsonArray = jsonObject.getJSONArray("servers");                if (jsonArray.length() > 0) {                    for (int i = 0; i < jsonArray.length(); i++) {                        JSONObject object = jsonArray.getJSONObject(i);                        try {                            api_model = new api_model();                            api_model.setServer_id(object.getInt("server_id"));                            api_model.setCountry_name(object.getString("Country_name"));                            api_model.setCity(object.getString("city"));                            api_model.setIp_ping(object.getString("Ip_Ping"));                            api_model.setConfig(object.getString("Config"));                            api_model.setType(object.getInt("Type"));                            api_model.setUsername(object.getString("username"));                            api_model.setPassword(object.getString("password"));                            api_array.add(api_model);                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                    if (api_array != null && !api_array.isEmpty()) {                        ping_all_ips(api_array);                    }                }            } catch (JSONException e) {                Log.d("json_exc", "" + e.getMessage());                fail_event();                e.printStackTrace();            }        } else {            fail_event();        }    }    void ping_all_ips(ArrayList<api_model> api_array_list) {        String TAG = "PingSpeed";        int threadCount = api_array_list.size() > 2 ? api_array_list.size() / 2 : 2;        if (threadCount >= 100) {            threadCount = 100;        }        ExecutorService executor = Executors.newFixedThreadPool(threadCount);        Observable.fromIterable(api_array_list).flatMap((Function<api_model,                        ObservableSource<api_model>>)                server -> {                    Observable<api_model> observable = Observable.fromCallable(() -> {                        float time = Ping.ping(server);                        server.setPing_val((int) time);                        Log.d("ping_val", "" + server.getPing_val());                        return server;                    }).subscribeOn(Schedulers.from(executor));                    if (RxJavaPlugins.getErrorHandler() != null) {                        return observable.timeout(15, TimeUnit.SECONDS);                    }                    return observable;                }).observeOn(AndroidSchedulers.mainThread())                .subscribe(new Observer<api_model>() {                    long start;                    @Override                    public void onSubscribe(@NotNull Disposable d) {                        start = System.currentTimeMillis();                    }                    @Override                    public void onNext(@NotNull api_model responsePojo) {                    }                    @Override                    public void onError(@NotNull Throwable e) {                        if (executor != null) {                            executor.shutdown();                        }                    }                    @RequiresApi(api = Build.VERSION_CODES.N)                    @Override                    public void onComplete() {                        Log.d(TAG, "onComplete: " + (System.currentTimeMillis() - start));                        if (executor != null) {                            executor.shutdown();                        }                        //on complete all data..!!                        if (home_Activity_SP != null) {                            if (api_array != null && !api_array.isEmpty()) {                                List<api_model> newList = new ArrayList<>(api_array);                                List<api_data_model_updated> newList_updated = new ArrayList<>();                                Random randomGenerator = new Random();                                random_selection = randomGenerator.nextInt(newList.size());                                api_data_model_updated = new api_data_model_updated();                                random_selection = randomGenerator.nextInt(newList.size());                                api_data_model_updated = new api_data_model_updated();                                api_data_model_updated.setServer_id(newList.get(random_selection).getServer_id());                                api_data_model_updated.setCountry_name(newList.get(random_selection).getCountry_name());                                api_data_model_updated.setCity(newList.get(random_selection).getCity());                                api_data_model_updated.setIp_ping(newList.get(random_selection).getIp_ping());                                api_data_model_updated.setConfig(newList.get(random_selection).getConfig());                                api_data_model_updated.setType(newList.get(random_selection).getType());                                api_data_model_updated.setUsername(newList.get(random_selection).getUsername());                                api_data_model_updated.setPassword(newList.get(random_selection).getPassword());                                newList_updated.add(api_data_model_updated);                                Gson gson = new Gson();                                String json = gson.toJson(api_array);                                if (!json.isEmpty()) {                                    SharedPreferences.Editor editor = home_Activity_SP.edit();                                    if (isJSONValid(json)) {                                        if (home_Activity_SP.contains("sgvpn_server_list")) {                                            editor.remove("sgvpn_server_list").apply();                                        }                                        editor.putString("sgvpn_server_list", json).apply();                                        for (api_data_model_updated Api_response_Pojo : newList_updated) {                                            Api_response_model = Api_response_Pojo;                                        }                                        storeValueToPreference(home_Activity_SP, "sgvpn_model_data", Api_response_model);                                        get_Ads();                                    }                                }                            }                        }                    }                });    }    private void get_Ads() {        RequestQueue queue = Volley.newRequestQueue(Fetch_Service.this);        StringRequest stringRequest = new StringRequest(Request.Method.GET, Constant.ADS_URL, response -> {            JSONObject jsonObject = null;            try {                jsonObject = new JSONObject(response);                get_Admob_ids(jsonObject);            } catch (JSONException e) {                fail_event();                e.printStackTrace();            }        }, error -> {            fail_event();        });        stringRequest.setRetryPolicy(new DefaultRetryPolicy(5000, 2, 2));        queue.add(stringRequest);    }    private void save_event() {        Constant.IS_RUN = true;        Intent intent = new Intent("data_fetched");        intent.putExtra("data_fetch", true);        LocalBroadcastManager.getInstance(Fetch_Service.this).sendBroadcast(intent);    }    private void fail_event() {        Constant.IS_RUN = true;        Intent intent = new Intent("data_fetched");        intent.putExtra("data_fetch", false);        LocalBroadcastManager.getInstance(Fetch_Service.this).sendBroadcast(intent);    }    private void get_Admob_ids(JSONObject jsonObject) {        try {            Constant.ADMOB_NATIVE_TESTING = jsonObject.getString("admob_native");            Constant.ADMOB_BANNER_AD = jsonObject.getString("admob_banner");            Constant.ADMOB_INTERSETIAL_AD = jsonObject.getString("admob_inter");            Constant.startapp_id = jsonObject.getString("startapp_id");            Constant.Startad_enable = jsonObject.getString("type");            Constant.open_ad = jsonObject.getString("open_ad");            save_event();        } catch (JSONException e) {            Log.d("json_excep", "" + e.getMessage());            e.printStackTrace();        }        if (!Constant.open_ad.isEmpty()) {            appOpenManager = new AppOpenManager((MyApplication) MyApplication.getContext(), Constant.open_ad);        }    }    public boolean isJSONValid(String test) {        try {            new JSONObject(test);        } catch (JSONException ex) {            try {                new JSONArray(test);            } catch (JSONException ex1) {                return false;            }        }        return true;    }}